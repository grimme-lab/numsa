name: CI

on: [push, pull_request]

env:
  BUILD_DIR: _build
  INSTALL_DIR: _dist
  PIP_PACKAGES: >-
    meson==0.62.0
    ninja
    gcovr

jobs:
  gcc-build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, ubuntu-latest]
        build: [meson, cmake]
        compiler: [gnu]
        version: [12]
        include:
        - os: ubuntu-latest
          build: meson
          compiler: gnu
          version: 10
        - os: ubuntu-latest
          build: meson
          compiler: gnu
          version: 9

    env:
       FC: 'gfortran'
       CC: 'gcc'
       PYTHON_V: 3.9
       GCC_V: ${{ matrix.version }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_V }}

    - name: Link pre-installed GCC and FC (macOS)
      if: ${{ contains(matrix.os, 'macos') && matrix.compiler == 'gnu' }}
      run: |
        gfortran_path=$( which gfortran-${{ env.GCC_V }} )
        gcc_path=$( which gcc-${{ env.GCC_V }} )
        gplusplus_path=$( which g++-${{ env.GCC_V }} )
        export FC=$gfortran_path
        export CC=$gcc_path
        export CXX=$gplusplus_path
        ln -s $gfortran_path /usr/local/bin/gfortran
        ln -s $gcc_path /usr/local/bin/gcc
        ln -s $gplusplus_path /usr/local/bin/g++

    - name: Install GCC (Linux)
      if: ${{ contains(matrix.os, 'ubuntu') && matrix.compiler == 'gnu' }}
      run: |
        sudo add-apt-repository ppa:ubuntu-toolchain-r/test
        sudo apt-get update
        sudo apt-get install -y gcc-${{ env.GCC_V}} gfortran-${{ env.GCC_V }} liblapack-dev
        sudo update-alternatives \
          --install /usr/bin/gcc gcc /usr/bin/gcc-${{ env.GCC_V }} 100 \
          --slave /usr/bin/gfortran gfortran /usr/bin/gfortran-${{ env.GCC_V }} \
          --slave /usr/bin/gcov gcov /usr/bin/gcov-${{ env.GCC_V }}

    - name: Install meson and test dependencies
      run: pip3 install ${{ env.PIP_PACKAGES }}

    - name: Configure build (meson)
      if: ${{ matrix.build == 'meson' }}
      run: >-
        meson setup ${{ env.BUILD_DIR }}
        --buildtype=debug
        --prefix=$PWD/_dist
        --libdir=lib
        --warnlevel=0
        -Db_coverage=true

    - name: Configure build (CMake)
      if: ${{ matrix.build == 'cmake' }}
      run: >-
        cmake -B${{ env.BUILD_DIR }}
        -GNinja
        -DCMAKE_BUILD_TYPE=Debug
        -DCMAKE_INSTALL_PREFIX=$PWD/_dist
        -DCMAKE_INSTALL_LIBDIR=lib

    - name: Build library
      run: ninja -C ${{ env.BUILD_DIR }}

    - name: Run unit tests (meson)
      if: ${{ matrix.build == 'meson' }}
      run: >-
         meson test
         -C ${{ env.BUILD_DIR }}
         --print-errorlogs
         --no-rebuild
         --num-processes 2
         -t 2

    - name: Run unit tests (ctest)
      if: ${{ matrix.build == 'cmake' }}
      run: |
         ctest --output-on-failure --parallel 2 
      working-directory: ${{ env.BUILD_DIR }}

    - name: Create coverage report
      if: ${{ matrix.build == 'meson'}}
      run:
         ninja -C ${{ env.BUILD_DIR }} coverage

    - name: Install project
      if: ${{ matrix.build != 'fpm' }}
      run: |
        ninja -C ${{ env.BUILD_DIR }} install


  # Test native MinGW Windows build
  mingw-build:
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        include: [
          { msystem: MINGW64, arch: x86_64 },
        # { msystem: MINGW32, arch: i686   }
        ]
    defaults:
      run:
        shell: msys2 {0}
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup MSYS2 toolchain
      uses: msys2/setup-msys2@v2
      with:
        msystem: ${{ matrix.msystem }}
        update: false
        install: >-
          git
          mingw-w64-${{ matrix.arch }}-gcc-fortran
          mingw-w64-${{ matrix.arch }}-python
          mingw-w64-${{ matrix.arch }}-python-pip
          mingw-w64-${{ matrix.arch }}-ninja

    - name: Install meson
      run: pip3 install meson==0.62

    - name: Configure build
      run: meson setup ${{ env.BUILD_DIR }} --warnlevel=0
      env:
        FC: gfortran
        CC: gcc

    - name: Build project
      run: meson compile -C ${{ env.BUILD_DIR }}

    - name: Run unit tests
      run: meson test -C ${{ env.BUILD_DIR }} --print-errorlogs --no-rebuild
      env:
        OMP_NUM_THREADS: 1

  # Build with Intel toolchain
  intel-build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
         os: [ubuntu-latest]
         compiler: [intel]
         version:  [2021.2.0]

   #  env:
   #    FC: ${{ matrix.fc }}
   #    CC: ${{ matrix.cc }}
   #    APT_PACKAGES: >-
   #      intel-oneapi-compiler-fortran
   #      asciidoctor

    env:
      FC: 'ifort'
      CC: 'icc'
      GCC_V: ${{ matrix.version }}
      PYTHON_V: 3.9
      LINUX_INTEL_COMPONENTS: >-
         intel-oneapi-compiler-fortran-2021.2.0
         intel-oneapi-compiler-dpcpp-cpp-and-cpp-classic-2021.2.0
         intel-oneapi-mkl-2021.2.0
         intel-oneapi-mkl-devel-2021.2.0

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_V }}

    - name: Install Intel (Linux)
      if: ${{ contains(matrix.os, 'ubuntu') && contains(matrix.compiler, 'intel') }}
      run: |
        wget https://apt.repos.intel.com/intel-gpg-keys/${{ env.KEY }}
        sudo apt-key add ${{ env.KEY }}
        rm ${{ env.KEY }}
        echo "deb https://apt.repos.intel.com/oneapi all main" | sudo tee /etc/apt/sources.list.d/oneAPI.list
        sudo apt-get update
        sudo apt-get install ${{ env.PKG }}
      env:
        KEY: GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
        PKG: ${{ env.LINUX_INTEL_COMPONENTS }}
  
    - name: Setup Intel oneAPI environment
      if: ${{ matrix.compiler == 'intel' }}
      run: |
        source /opt/intel/oneapi/setvars.sh
        printenv >> $GITHUB_ENV

    - name: Install meson
      run: pip3 install meson==0.62.0 ninja

    - name: Configure meson build
      run: >-
        meson setup ${{ env.BUILD_DIR }}
        --prefix=/
        --libdir=lib
        --default-library=static
        -Dfortran_link_args="-static -qopenmp"

    - name: Build library
      run: meson compile -C ${{ env.BUILD_DIR }}

    - name: Run unit tests
      run: meson test -C ${{ env.BUILD_DIR }} --print-errorlogs --no-rebuild
      env:
        OMP_NUM_THREADS: 2,1

    - name: Install package
      run: meson install -C ${{ env.BUILD_DIR }} --no-rebuild
      env:
        DESTDIR: ${{ env.INSTALL_DIR }}
