name: CI

on: [push, pull_request]

env:
  BUILD_DIR: _build
  PIP_PACKAGES: >-
    meson==0.62.0
    ninja
    gcovr

jobs:
  gcc-build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, ubuntu-latest]
        fc: [gfortran-11]
        cc: [gcc-11]
        include:
          - os: ubuntu-latest
            fc: gfortran-9
            cc: gcc-9
          - os: ubuntu-latest
            fc: gfortran-10
            cc: gcc-10

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup Python
      uses: actions/setup-python@v1
      with:
        python-version: 3.x

    - name: Install meson and test dependencies
      run: pip3 install ${{ env.PIP_PACKAGES }}

    - name: Configure build
      run: >-
        meson setup ${{ env.BUILD_DIR }}
        --buildtype=debug
        --prefix=$PWD/_dist
        --libdir=lib
        --warnlevel=0
        -Db_coverage=true
      env:
         FC: ${{ matrix.fc }}
         CC: ${{ matrix.cc }}

    - name: Build library
      run: meson compile -C ${{ env.BUILD_DIR }}

    - name: Run unit tests
      run: |
         meson test -C ${{ env.BUILD_DIR }} --print-errorlogs --no-rebuild --num-processes 2 -t 2
         ninja -C ${{ env.BUILD_DIR }} coverage

    - name: Install project
      run: |
        meson install -C ${{ env.BUILD_DIR }} --no-rebuild


  # Test native MinGW Windows build
  mingw-build:
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        include: [
          { msystem: MINGW64, arch: x86_64 },
        # { msystem: MINGW32, arch: i686   }
        ]
    defaults:
      run:
        shell: msys2 {0}
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup MSYS2 toolchain
      uses: msys2/setup-msys2@v2
      with:
        msystem: ${{ matrix.msystem }}
        update: false
        install: >-
          git
          mingw-w64-${{ matrix.arch }}-gcc-fortran
          mingw-w64-${{ matrix.arch }}-python
          mingw-w64-${{ matrix.arch }}-python-pip
          mingw-w64-${{ matrix.arch }}-ninja

    - name: Install meson
      run: pip3 install meson==0.62

    - name: Configure build
      run: meson setup ${{ env.BUILD_DIR }} --warnlevel=0
      env:
        FC: gfortran
        CC: gcc

    - name: Build project
      run: meson compile -C ${{ env.BUILD_DIR }}

    - name: Run unit tests
      run: meson test -C ${{ env.BUILD_DIR }} --print-errorlogs --no-rebuild
      env:
        OMP_NUM_THREADS: 1

  # Build with Intel toolchain
  intel-build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04]
        fc: [ifort]
        cc: [icc]

    env:
      FC: ${{ matrix.fc }}
      CC: ${{ matrix.cc }}
      APT_PACKAGES: >-
        intel-oneapi-compiler-fortran
        asciidoctor

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - uses: actions/setup-python@v1
      with:
        python-version: '3.x'

    - name: Add Intel repository
      run: |
        wget https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
        sudo apt-key add GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
        rm GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
        echo "deb https://apt.repos.intel.com/oneapi all main" | sudo tee /etc/apt/sources.list.d/oneAPI.list
        sudo apt-get update

    - name: Install Intel oneAPI compiler
      run: |
        sudo apt-get install ${{ env.APT_PACKAGES }}
        source /opt/intel/oneapi/setvars.sh
        printenv >> $GITHUB_ENV

    - name: Install meson
      run: pip3 install meson==0.62.0 ninja

    - name: Configure meson build
      run: >-
        meson setup ${{ env.BUILD_DIR }}
        --prefix=/
        --libdir=lib
        --default-library=static
        -Dfortran_link_args="-static -qopenmp"

    - name: Build library
      run: meson compile -C ${{ env.BUILD_DIR }}

    - name: Run unit tests
      run: meson test -C ${{ env.BUILD_DIR }} --print-errorlogs --no-rebuild
      env:
        OMP_NUM_THREADS: 2,1

    - name: Install package
      run: meson install -C ${{ env.BUILD_DIR }} --no-rebuild
      env:
        DESTDIR: ${{ env.PWD }}/dftd4-bleed
